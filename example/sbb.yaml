grids:
    swissgrid:
        resolutions: [750, 500, 250, 100, 50]
        bbox: [420000, 30000, 900000, 350000]
        tile_size: 256
        srs: EPSG:21781

caches:
    local:
        type: filesystem
        http_url: http://taurus/tiles
        folder: /var/www/tiles
    s3:
        type: s3
        http_url: https://%(host)s/%(bucket)s/%(folder)s
        host: s3-eu-west-1.amazonaws.com
        bucket: tiles
        folder: tiles

layer_default:
    grid: swissgrid
    type: mapnik
    mapfile: tilegeneration/sbb.mapnik
    url: http://dev.regiogis-beo.ch/main/wsgi/mapserv_proxy # ${mapserv_url}
    wmts_style: default
    dimensions:
    -   name: VERSION
        default: 1
        value: 1
        values: [1]
    meta: on
    meta_size: 8
    meta_buffer: 0
    data_buffer: 128
    connection: user=www-data password=www-data dbname=sbbgeoportal_c2c host=host
    sql: ST_Union(ST_Buffer(geom, 100, 2)) FROM webapp.verbund_map

layers:
    mapnik:
        output_format: png
        extension: png
        mime_type: image/png
    grid:
        type: mapnik
        mapfile: example/sbb_verbund.mapnik
        output_format: grid
        extension: json
        mime_type: application/utfgrid
        resolution: 4
        meta: off
        layers_fields:
            netzkarte_point:
            - name
            - url_a4
            - url_poster
            - url_shopping

generation:
    default_cache: local
    default_layers: [mapnik, grid]
 #   authorised_user: www-data
    maxconsecutive_errors: 10
    number_process: 8

openlayers:
    srs: EPSG:21781
    center_x: 600000
    center_y: 200000


cost:
    # [ms]
    tileonly_generation_time: 60
    # [ms]
    tile_generation_time: 30
    # [ms]
    metatile_generation_time: 30
    # [ko]
    tile_size: 20
    # [nb/month]
    request: 10000000
    # GeoData size [Go]
    esb_size: 100
    # http://aws.amazon.com/s3/pricing/pricing-storage.json
    # http://aws.amazon.com/s3/pricing/
    s3:
        # [$/Go/month]
        # [$/put/1000]
        storage: 0.125
        put: 0.01
        # [$/get/10000]
        get: 0.01
        # [$/Go]
        download: 0.12
    # http://aws.amazon.com/cloudfront/pricing/
    cloudfront:
        # [$/get/10000]
        get: 0.009
        # [$/Go]
        download: 0.12
    # http://aws.amazon.com/ec2/pricing/ri-medium-linux.json
    # http://aws.amazon.com/ec2/pricing/
    ec2:
        # medium
        # [$/hour]
        usage: 0.17
    # http://aws.amazon.com/ebs/
    esb:
        # [$/1Go/month]
        storage: 0.11
        # [$/ 1000 E/S/s /month]
        io: 260
    # http://aws.amazon.com/sqs/pricing/
    sqs:
        # [$/10000]
        request: 0.01
